package com.example.todo;

import android.content.Context;

import java.util.Calendar;
import java.util.GregorianCalendar;

public class Task {
    //A class that defines a task's properties
    private long id; //ID received from database.
    private String title;
    private String content; //Side notes
    private boolean isImportant, isInMyDay;
    private int day, month, year;

    public Task(String title, String content, boolean isImportant, boolean isInMyDay, int d, int m, int y, long id) {
        //Base constructor.
        this.title = title;
        this.content = content;
        this.isImportant = isImportant;
        this.isInMyDay = isInMyDay;
        this.day = d;
        this.month = m;
        this.year = y;
        this.id = id;
    }

    public Task(String title, String content, boolean isImportant, boolean isInMyDay, Calendar assignedDate, long id) {
        // Base constructor
        this(title, content, isImportant, isInMyDay, 0, 0, 0, id);
        setAssignedDate(assignedDate);
    }

    public Task(String title, String content, boolean isImportant, long id) {
        // Quickly add to my day, created from a cursor.
        this(title, content, isImportant, true, Calendar.getInstance(), id);
    }

    public Task(String title, String content, boolean isImportant, Context context) {
        // Quickly add to my day, created from the app; Context should point to MainActivity.this.
        this(title, content, isImportant, 0);
        this.id = fetchID(context);
    }

    private long fetchID(Context context) {
        // Fetches the ID generated by the database after record insertion.
        DBHelper helper = new DBHelper(context);
        long id = helper.insertIntoTblTask(this);
        return id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public boolean isImportant() {
        return isImportant;
    }

    public void setImportant(boolean important) {
        isImportant = important;
    }

    public boolean isInMyDay() {
        return isInMyDay;
    }

    public void setInMyDay(boolean inMyDay) {
        isInMyDay = inMyDay;
    }

    public Calendar getAssignedDate() {
        Calendar c;
        c = new GregorianCalendar(this.year, this.month - 1, this.day); //month is ranged between 0-11.
        return c;
    }

    public int getDay() {
        return day;
    }

    public void setDay(int day) {
        this.day = day;
    }

    public int getMonth() {
        return month;
    }

    public void setMonth(int month) {
        this.month = month;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public void setAssignedDate(Calendar date) {
        int y, m, d;
        y = date.get(Calendar.YEAR);
        m = date.get(Calendar.MONTH);
        d = date.get(Calendar.DAY_OF_MONTH);
        this.day = d;
        this.month = m;
        this.year = y;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    //Date management.
    public boolean isDue() {
        //Returns whether the task is still due - meaning if the time of the assigned date is bigger than or equal to now.
        Calendar now = Calendar.getInstance();
        if (now.get(Calendar.YEAR) < this.year)
            return true; // still due for a few years.
        else if (now.get(Calendar.YEAR) == this.year)
        {
            // still due for this year
            if (now.get(Calendar.MONTH) < this.month)
                return true; // still due for a few months
            else if(now.get(Calendar.MONTH) == this.month)
            {
                // still due for this month
                if (now.get(Calendar.DAY_OF_MONTH) <= this.day)
                    return true; // still due.
            }
        }

        // In any other case, it is no longer due.
        return false; // no longer due.
        //return now.before(this.getAssignedDate()); //if we are now before the assigned date.
    }

    public String getStringFromDate() {
        //Format is DD/MM/YY.
        String date = this.day + "-" + (this.month + 1) + "-" + this.year;
        return date;
    }
}
